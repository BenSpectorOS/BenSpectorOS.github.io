//////////////////////////////////////////////////////////////////////
// Function 1 - Object Values ////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

function objectValues(object) {
    // plant
    var valuesArray = [];
    
    // water - iterate
    for (var key in object) {
        valuesArray.push(object[key])
    }
    
    // harvest
    return valuesArray;
    
} 

//////////////////////////////////////////////////////////////////////
// Function 2 - Keys to String ///////////////////////////////////////
//////////////////////////////////////////////////////////////////////

function keysToString(data) {
    /* 
    Input: [Object] data - any Object
    Output: [String] - keys separated with a space
    Constructs: (methods, functions, iteration, conditionals)
    - Object.keys(data);
    - arr.join(" ")
    Edge Cases:
    -
    
    */
    var keysArray = Object.keys(data);  // ['a', 'b', 'ponies', 'dingle']
    var keysStr = keysArray.join(" ");  // 'a b ponies dingle'
    
    return keysStr;
    
    // return Object.keys(data).join(" ")
}

//////////////////////////////////////////////////////////////////////
// Function 3 - Values to String /////////////////////////////////////
//////////////////////////////////////////////////////////////////////

function valuesToString(object) {
    /*
    Input: [Object] object - any Object
    Output: [String] - String values separated with a space
    Constructs: (methods, functions, iteration, conditionals)
    - objectValues()
    - arr.join(" ")
    Edge Cases:
    - only String values should be included
    */
    var arr = [];
    
    // put the values from the object into an Array
    for (var key in object) {
        // make sure only String values are added
        if (typeof object[key] === "string") {
            arr.push(object[key]);    
        }
    }
    
    return arr.join(" ");
}


//////////////////////////////////////////////////////////////////////
// Function 4 - Array or Object //////////////////////////////////////
//////////////////////////////////////////////////////////////////////

function arrayOrObject(collection) {
    
}

//////////////////////////////////////////////////////////////////////
// Function 5 - Capitalize Word //////////////////////////////////////
//////////////////////////////////////////////////////////////////////

function capitalizeWord(string) {
    
}

//////////////////////////////////////////////////////////////////////
// Function 6 - Capitalize All Words /////////////////////////////////
//////////////////////////////////////////////////////////////////////

function capitalizeAllWords(string) {
    
}

//////////////////////////////////////////////////////////////////////
// Function 7 - Welcome Message //////////////////////////////////////
//////////////////////////////////////////////////////////////////////

function welcomeMessage(object) {

}

//////////////////////////////////////////////////////////////////////
// Function 8 - Profile Info /////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

function profileInfo(object) {

}

//////////////////////////////////////////////////////////////////////
// Function 9 - Maybe Noises /////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

function maybeNoises(object) {

}

//////////////////////////////////////////////////////////////////////
// Function 10 - Has Words ///////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

/*
IOCE - Input, Output, Constructs, Edge-Cases

@param string [String] - a string of words
@param word [String] - a word

@return [Boolean] - true if word is in string,
    false otherwise

*/
function hasWord(string, word) {
    var array = string.split(" ");
    // iterate
    for (var i = 0; i < array.length; i++) {
    	// test each value
        if (array[i] === word) {
    	// return early if found
    		return true;
    	}
    }
    // return negative if end of loop is reached
    return false;

}

//////////////////////////////////////////////////////////////////////
// Function 11 - Add Friend //////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

function addFriend (name, object) {

}

//////////////////////////////////////////////////////////////////////
// Function 12 - Is Friend ///////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

function isFriend(name, object) {
    const array = object.friends;
    
    if (array === undefined) {
        return false;
    }
    
    // iterate
    for (let i = 0; i < array.length; i++) {
    	// test each value
        if (array[i] === name) {
    	// return early if found
    		return true;
    	}
    }
    // return negative if end of loop is reached
    return false;
}

//////////////////////////////////////////////////////////////////////
// Function 13 - Non-Friends /////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

function nonFriends(name, array) {

}

//////////////////////////////////////////////////////////////////////
// Function 14 - Update Object ///////////////////////////////////////
//////////////////////////////////////////////////////////////////////

function updateObject(object, key, value) {

}

//////////////////////////////////////////////////////////////////////
// Function 15 - Remove Properties ///////////////////////////////////
//////////////////////////////////////////////////////////////////////

function removeProperties(object, array) {

}

//////////////////////////////////////////////////////////////////////
// Function 16 - Dedup ///////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

function dedup(array) {

}

//////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE ////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

if((typeof process !== 'undefined') &&
   (typeof process.versions.node !== 'undefined')) {
    // here, export any references you need for tests //
    module.exports.objectValues = objectValues;
    module.exports.keysToString = keysToString;
    module.exports.valuesToString = valuesToString;
    module.exports.arrayOrObject = arrayOrObject;
    module.exports.capitalizeWord = capitalizeWord;
    module.exports.capitalizeAllWords = capitalizeAllWords;
    module.exports.welcomeMessage = welcomeMessage;
    module.exports.profileInfo = profileInfo;
    module.exports.maybeNoises = maybeNoises;
    module.exports.hasWord = hasWord;
    module.exports.addFriend = addFriend;
    module.exports.isFriend = isFriend;
    module.exports.nonFriends = nonFriends;
    module.exports.updateObject = updateObject;
    module.exports.removeProperties = removeProperties;
    module.exports.dedup = dedup;
}